// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Storage;

#nullable disable

namespace Storage.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "1",
                            Name = "Barber",
                            NormalizedName = "Barber"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "1",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8946c167-5836-4707-9060-290b015b9a53",
                            Email = "Admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Admin@admin.com",
                            NormalizedUserName = "Admin",
                            PasswordHash = "AQAAAAIAAYagAAAAEPb2i0bOt0BT7vfmNJjLp3mGDaci4KJNpywxuNGwtqHk82f29BobabEraI4XpAhmpA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ebdd9cce-bcac-4eeb-9513-7bfe80ae4092",
                            Email = "Barber1@barber.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Barber1@barber.com",
                            NormalizedUserName = "Barber1",
                            PasswordHash = "AQAAAAIAAYagAAAAEE0vInjc8sOArbjDr0M3KwrCRMIrNNsHgjF2vcFywTIXAf1RWc2mc8RuE6ZRkQEtgQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Barber1"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8e939e45-da36-461b-8e23-c4c4dba7e76e",
                            Email = "Barber2@barber.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Barber2@barber.com",
                            NormalizedUserName = "Barber2",
                            PasswordHash = "AQAAAAIAAYagAAAAEAugHH5m6hBCCAeoIpZWpf/2hp/uCtrM3BCV8Sz9rpvUHEFosvGPulUO5D9RDC8dWg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Barber2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Storage.Models.Barber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdChiNhanhWork")
                        .HasColumnType("int");

                    b.Property<string>("IdUserBarber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameBarber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdChiNhanhWork");

                    b.HasIndex("IdUserBarber")
                        .IsUnique();

                    b.ToTable("Barber");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdChiNhanhWork = 1,
                            IdUserBarber = "2",
                            NameBarber = "Barber 1"
                        },
                        new
                        {
                            Id = 2,
                            IdChiNhanhWork = 2,
                            IdUserBarber = "3",
                            NameBarber = "Barber 2"
                        });
                });

            modelBuilder.Entity("Storage.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdBarber")
                        .HasColumnType("int");

                    b.Property<int>("IdChiNhanh")
                        .HasColumnType("int");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("int");

                    b.Property<int>("IdDichVu")
                        .HasColumnType("int");

                    b.Property<DateTime>("ThoiGianBatDau")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TrangThai")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdBarber");

                    b.HasIndex("IdChiNhanh");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdDichVu");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("Storage.Models.ChiNhanh", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DiaChi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdViTri")
                        .HasColumnType("int");

                    b.Property<string>("TenChiNhanh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdViTri");

                    b.ToTable("ChiNhanh");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DiaChi = "502 Đỗ Xuân Hợp, Phước Long B, TP. Thủ Đức",
                            IdViTri = 1,
                            TenChiNhanh = "Barber Đỗ Xuân Hợp"
                        },
                        new
                        {
                            Id = 2,
                            DiaChi = "302 Lê Văn Việt, Phường Hiệp Phú, TP. Thủ Đức",
                            IdViTri = 1,
                            TenChiNhanh = "Barber Lê Văn Việt"
                        },
                        new
                        {
                            Id = 3,
                            DiaChi = "113 Lê Thị Riêng, Bến Thành, Quận 1, TP.Hồ Chí Minh",
                            IdViTri = 1,
                            TenChiNhanh = "Barber Lê Thị Riêng"
                        },
                        new
                        {
                            Id = 4,
                            DiaChi = "339 Lê Văn Sỹ, Phường 13, Quận 3, TP. Hồ Chí Minh",
                            IdViTri = 1,
                            TenChiNhanh = "Barber Lê Văn Sỹ"
                        },
                        new
                        {
                            Id = 5,
                            DiaChi = "Số 5 Tuệ Tĩnh, Hai Bà Trưng, Hà Nội",
                            IdViTri = 2,
                            TenChiNhanh = "Barber Tuệ Tĩnh"
                        },
                        new
                        {
                            Id = 6,
                            DiaChi = "Số 38A Triệu Việt Vương, Hai Bà Trưng, Hà Nội",
                            IdViTri = 2,
                            TenChiNhanh = "Barber Triệu Việt Vương"
                        },
                        new
                        {
                            Id = 7,
                            DiaChi = "Số 37 Phạm Hồng Thái, Trúc Bạch, Ba Đình, Hà Nội",
                            IdViTri = 2,
                            TenChiNhanh = "Barber Phạm Hồng Thái"
                        },
                        new
                        {
                            Id = 8,
                            DiaChi = "Số 30 Hạ Hồi, Hoàn Kiếm, Hà Nội",
                            IdViTri = 2,
                            TenChiNhanh = "Barber Hạ Hồi"
                        },
                        new
                        {
                            Id = 9,
                            DiaChi = "Số 20 Đường Đông Khê 1, Ngô Quyền, Hải Phòng",
                            IdViTri = 3,
                            TenChiNhanh = "Barber Đông Khê"
                        },
                        new
                        {
                            Id = 10,
                            DiaChi = "Số 86 Hải Triều, Quán Toan, Hải Phòng",
                            IdViTri = 3,
                            TenChiNhanh = "Barber Hải Triều"
                        },
                        new
                        {
                            Id = 11,
                            DiaChi = "24 Lê Đại Hành, Hồng Bàng, Hải Phòng",
                            IdViTri = 3,
                            TenChiNhanh = "Barber Lê Đại Hành"
                        },
                        new
                        {
                            Id = 12,
                            DiaChi = "100 Lạch Tray, Ngô Quyền, Hải Phòng",
                            IdViTri = 3,
                            TenChiNhanh = "Barber Lạch Tray"
                        },
                        new
                        {
                            Id = 13,
                            DiaChi = "722 Phú Riềng Đỏ, P Tân Xuân, Tp Đồng Xoài, Bình Phước",
                            IdViTri = 4,
                            TenChiNhanh = "Barber Phú Riềng Đỏ"
                        },
                        new
                        {
                            Id = 14,
                            DiaChi = "Đường Nguyễn Huệ, Kp3, P. Tân Đồng, TX. Đồng Xoài, Bình Phước",
                            IdViTri = 4,
                            TenChiNhanh = "Barber Nguyễn Huệ"
                        },
                        new
                        {
                            Id = 15,
                            DiaChi = "87 Hùng Vương, Tân Bình, Đồng Xoài, Bình Phước",
                            IdViTri = 4,
                            TenChiNhanh = "Barber Hùng Vương"
                        });
                });

            modelBuilder.Entity("Storage.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdUserCustomer")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameCustomer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdUserCustomer")
                        .IsUnique();

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Storage.Models.DanhMuc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MoTaDanhMuc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenDanhMuc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DanhMuc");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MoTaDanhMuc = "Bao gồm các dịch vụ cắt gội massage thư giản",
                            TenDanhMuc = "Cắt Tóc"
                        },
                        new
                        {
                            Id = 2,
                            MoTaDanhMuc = "Các dịch vụ uốn tóc cao cấp",
                            TenDanhMuc = "Uốn Tóc"
                        },
                        new
                        {
                            Id = 3,
                            MoTaDanhMuc = "Duỗi thẳng tóc xoăn tóc gãy",
                            TenDanhMuc = "Duỗi Tóc"
                        },
                        new
                        {
                            Id = 4,
                            MoTaDanhMuc = "Các dịch vụ nhuộm tóc cao cấp",
                            TenDanhMuc = "Nhuộm Tóc"
                        },
                        new
                        {
                            Id = 5,
                            MoTaDanhMuc = "Phục hồi tóc bị hư tổn",
                            TenDanhMuc = "Phục Hồi Tóc"
                        });
                });

            modelBuilder.Entity("Storage.Models.DichVu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Gia")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("IdDanhMuc")
                        .HasColumnType("int");

                    b.Property<string>("MoTa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenDichVu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdDanhMuc");

                    b.ToTable("DichVu");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Gia = 60000m,
                            IdDanhMuc = 1,
                            MoTa = "Tạo kiểu mái phù hợp với khuôn mặt và phong cách cá nhân",
                            TenDichVu = "Cắt tóc mái"
                        },
                        new
                        {
                            Id = 2,
                            Gia = 120000m,
                            IdDanhMuc = 1,
                            MoTa = "Cắt tóc để tạo ra độ dài và kiểu dáng mong muốn trên toàn bộ tóc",
                            TenDichVu = "Cắt tóc đều"
                        },
                        new
                        {
                            Id = 3,
                            Gia = 150000m,
                            IdDanhMuc = 1,
                            MoTa = "Sấy và làm tóc xoăn hoặc làm thẳng",
                            TenDichVu = "Cắt tóc tạo kiểu"
                        },
                        new
                        {
                            Id = 4,
                            Gia = 320000m,
                            IdDanhMuc = 2,
                            MoTa = "Sấy tóc để tạo kiểu xoăn hoặc thẳng nhanh chóng",
                            TenDichVu = "Uốn tóc nhanh"
                        },
                        new
                        {
                            Id = 5,
                            Gia = 700000m,
                            IdDanhMuc = 2,
                            MoTa = "Sử dụng hóa chất để tạo kiểu xoăn tóc kéo dài thời gian",
                            TenDichVu = "Uốn tóc lâu dài"
                        },
                        new
                        {
                            Id = 6,
                            Gia = 720000m,
                            IdDanhMuc = 2,
                            MoTa = "Tạo kiểu tóc với những sóng tự nhiên giống như kiểu tóc sau khi đi biển",
                            TenDichVu = "Uốn tóc xù"
                        },
                        new
                        {
                            Id = 7,
                            Gia = 500000m,
                            IdDanhMuc = 3,
                            MoTa = "Sử dụng sản phẩm chứa keratin để giảm độ xoăn và tăng độ mềm mại cho tóc",
                            TenDichVu = "Duỗi tóc keratin"
                        },
                        new
                        {
                            Id = 8,
                            Gia = 500000m,
                            IdDanhMuc = 3,
                            MoTa = "Sử dụng máy laze để làm thẳng tóc",
                            TenDichVu = "Duỗi tóc máy laze"
                        },
                        new
                        {
                            Id = 9,
                            Gia = 500000m,
                            IdDanhMuc = 3,
                            MoTa = "Sử dụng hơi nước và thiết bị ion để làm thẳng tóc",
                            TenDichVu = "Duỗi tóc ion hơi nước"
                        },
                        new
                        {
                            Id = 10,
                            Gia = 500000m,
                            IdDanhMuc = 3,
                            MoTa = "Sử dụng hóa chất để làm thẳng tóc và giữ độ thẳng lâu dài",
                            TenDichVu = "Duỗi tóc ổn định"
                        },
                        new
                        {
                            Id = 11,
                            Gia = 900000m,
                            IdDanhMuc = 4,
                            MoTa = "Thay đổi màu sắc của toàn bộ bộ tóc",
                            TenDichVu = "Nhuộm toàn bộ tóc"
                        },
                        new
                        {
                            Id = 12,
                            Gia = 500000m,
                            IdDanhMuc = 4,
                            MoTa = "Nhuộm chỉ một phần cụ thể của tóc, như mái, đuôi, hoặc mèo",
                            TenDichVu = "Nhuộm phần tóc"
                        },
                        new
                        {
                            Id = 13,
                            Gia = 950000m,
                            IdDanhMuc = 4,
                            MoTa = "Tạo những sợi tóc nhấn màu, thường là những sợi tóc màu sáng hơn so với màu tự nhiên của tóc",
                            TenDichVu = "Highlight"
                        },
                        new
                        {
                            Id = 14,
                            Gia = 800000m,
                            IdDanhMuc = 5,
                            MoTa = "Sử dụng dầu nhiệt đới để làm nóng tóc và tăng cường dưỡng chất cho tóc",
                            TenDichVu = " Phục hồi bằng dầu nhiệt đới"
                        },
                        new
                        {
                            Id = 15,
                            Gia = 820000m,
                            IdDanhMuc = 5,
                            MoTa = "Cho những người đã nhuộm tóc, dịch vụ này giúp bảo quản và tái tạo màu sắc của tóc",
                            TenDichVu = "Phục hồi màu tóc"
                        });
                });

            modelBuilder.Entity("Storage.Models.HuyLichHen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdBooking")
                        .HasColumnType("int");

                    b.Property<string>("LyDoHuyLich")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ThoiGianHuy")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdBooking")
                        .IsUnique();

                    b.ToTable("HuyLichHen");
                });

            modelBuilder.Entity("Storage.Models.LichHen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdBooking")
                        .HasColumnType("int");

                    b.Property<DateTime>("ThoiGianKetThuc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TrangThaiHoanThanh")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdBooking")
                        .IsUnique();

                    b.ToTable("LichHen");
                });

            modelBuilder.Entity("Storage.Models.ViTri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TinhThanhPho")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ViTri");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TinhThanhPho = "Hồ Chí Minh"
                        },
                        new
                        {
                            Id = 2,
                            TinhThanhPho = "Hà Nội"
                        },
                        new
                        {
                            Id = 3,
                            TinhThanhPho = "Hải Phòng"
                        },
                        new
                        {
                            Id = 4,
                            TinhThanhPho = "Bình Phước"
                        });
                });

            modelBuilder.Entity("Storage.Models.AspNetUsers", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Storage.Models.Barber", b =>
                {
                    b.HasOne("Storage.Models.ChiNhanh", "ChiNhanh")
                        .WithMany("Barbers")
                        .HasForeignKey("IdChiNhanhWork")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Storage.Models.AspNetUsers", "AspNetUsers")
                        .WithOne("Barber")
                        .HasForeignKey("Storage.Models.Barber", "IdUserBarber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AspNetUsers");

                    b.Navigation("ChiNhanh");
                });

            modelBuilder.Entity("Storage.Models.Booking", b =>
                {
                    b.HasOne("Storage.Models.Barber", "Barber")
                        .WithMany("Bookings")
                        .HasForeignKey("IdBarber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Storage.Models.ChiNhanh", "ChiNhanh")
                        .WithMany("Bookings")
                        .HasForeignKey("IdChiNhanh")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Storage.Models.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Storage.Models.DichVu", "DichVu")
                        .WithMany("Bookings")
                        .HasForeignKey("IdDichVu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barber");

                    b.Navigation("ChiNhanh");

                    b.Navigation("Customer");

                    b.Navigation("DichVu");
                });

            modelBuilder.Entity("Storage.Models.ChiNhanh", b =>
                {
                    b.HasOne("Storage.Models.ViTri", "ViTri")
                        .WithMany("ChiNhanhs")
                        .HasForeignKey("IdViTri")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ViTri");
                });

            modelBuilder.Entity("Storage.Models.Customer", b =>
                {
                    b.HasOne("Storage.Models.AspNetUsers", "AspNetUsers")
                        .WithOne("Customer")
                        .HasForeignKey("Storage.Models.Customer", "IdUserCustomer")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AspNetUsers");
                });

            modelBuilder.Entity("Storage.Models.DichVu", b =>
                {
                    b.HasOne("Storage.Models.DanhMuc", "DanhMuc")
                        .WithMany("DichVus")
                        .HasForeignKey("IdDanhMuc")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DanhMuc");
                });

            modelBuilder.Entity("Storage.Models.HuyLichHen", b =>
                {
                    b.HasOne("Storage.Models.Booking", "Booking")
                        .WithOne("HuyLichHen")
                        .HasForeignKey("Storage.Models.HuyLichHen", "IdBooking")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Storage.Models.LichHen", b =>
                {
                    b.HasOne("Storage.Models.Booking", "Booking")
                        .WithOne("LichHen")
                        .HasForeignKey("Storage.Models.LichHen", "IdBooking")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Storage.Models.Barber", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Storage.Models.Booking", b =>
                {
                    b.Navigation("HuyLichHen");

                    b.Navigation("LichHen");
                });

            modelBuilder.Entity("Storage.Models.ChiNhanh", b =>
                {
                    b.Navigation("Barbers");

                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Storage.Models.Customer", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Storage.Models.DanhMuc", b =>
                {
                    b.Navigation("DichVus");
                });

            modelBuilder.Entity("Storage.Models.DichVu", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Storage.Models.ViTri", b =>
                {
                    b.Navigation("ChiNhanhs");
                });

            modelBuilder.Entity("Storage.Models.AspNetUsers", b =>
                {
                    b.Navigation("Barber")
                        .IsRequired();

                    b.Navigation("Customer")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
